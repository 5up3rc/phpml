<?php

namespace tests\phpml\parser;

use phpml\parser\File;

/**
 * Test class for File.
 * Generated by PHPUnit on 2010-09-25 at 01:26:22.
 */
class FileTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var File
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        //$this->object = new File;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
//        unset($this->object);
    }
/*
    public function testInitialFileContext()
    {
    	
        $file = new File('testFiles/not_empty_file');
        $this->assertTrue(is_resource($file->getFilePointer()));
        $this->assertEquals($file->getCurrentLine(), 1);
        $this->assertEquals($file->getCurrentPos(), 0);
    }

    public function testAutoOpenFile()
    {
        $file = new File('testFiles/not_empty_file');
        $this->assertTrue(is_resource($file->getFilePointer()));
    }

    public function testLazyOpenFile()
    {
        $file = new File('testFiles/not_empty_file', false);
        $this->assertFalse(is_resource($file->getFilePointer()));
    }

    public function testEmptyFile()
    {
        $file = new File('testFiles/empty_file');
        $this->assertFalse($file->getNextChar());
        $this->assertTrue($file->isEOF());
    }

    public function testNotEmptyFile()
    {
        $file = new File('testFiles/not_empty_file');
        $file->getNextChar();
        $this->assertFalse($file->isEOF());
    }

    public function testFileState()
    {
        $file = new File('testFiles/two_lines_file');
        $this->assertEquals($file->getCurrentLine(), 1);
        $this->assertEquals($file->getCurrentPos(), 0);

        $file->saveState();
        $this->assertEquals($file->getNextChar(), "\n");
        $this->assertEquals($file->getCurrentLine(), 2);
        $this->assertEquals($file->getCurrentPos(), 1);

        $file->restoreState();
        $this->assertEquals($file->getCurrentLine(), 1);
        $this->assertEquals($file->getCurrentPos(), 0);
    }

    public function testReadChar()
    {
        $file = new File('testFiles/not_empty_file');
        $this->assertEquals($file->getCurrentLine(), 1);
        $this->assertEquals($file->getCurrentPos(), 0);

        $this->assertEquals($file->getNextChar(), 'n');

        $this->assertEquals($file->getCurrentLine(), 1);
        $this->assertEquals($file->getCurrentPos(), 1);
    }

    public function testReadCharMultiLineFileUnix()
    {
        $file = new File('testFiles/multiline_file_unix');

        $this->assertEquals($file->getCurrentLine(), 1);
        $this->assertEquals($file->getCurrentPos(), 0);

        $this->assertEquals($file->getNextChar(), 1);
        $this->assertEquals($file->getNextChar(), "\n");

        $this->assertEquals($file->getCurrentLine(), 2);
        $this->assertEquals($file->getCurrentPos(), 2);

        $this->assertEquals($file->getNextChar(), 2);
        $this->assertEquals($file->getNextChar(), "\n");

        $this->assertEquals($file->getCurrentLine(), 3);
        $this->assertEquals($file->getCurrentPos(), 4);

        $this->assertEquals($file->getNextChar(), "\n");
        $this->assertEquals($file->getNextChar(), 3);

        $this->assertEquals($file->getCurrentLine(), 4);
        $this->assertEquals($file->getCurrentPos(), 6);
    }

    public function testReadCharMultiLineFileMac()
    {
        $file = new File('testFiles/multiline_file_mac');

        $this->assertEquals($file->getCurrentLine(), 1);
        $this->assertEquals($file->getCurrentPos(), 0);

        $this->assertEquals($file->getNextChar(), 1);
        $this->assertEquals($file->getNextChar(), "\r");

        $this->assertEquals($file->getCurrentLine(), 2);
        $this->assertEquals($file->getCurrentPos(), 2);

        $this->assertEquals($file->getNextChar(), 2);
        $this->assertEquals($file->getNextChar(), "\r");

        $this->assertEquals($file->getCurrentLine(), 3);
        $this->assertEquals($file->getCurrentPos(), 4);

        $this->assertEquals($file->getNextChar(), "\r");
        $this->assertEquals($file->getNextChar(), 3);

        $this->assertEquals($file->getCurrentLine(), 4);
        $this->assertEquals($file->getCurrentPos(), 6);
    }

    public function testReadCharMultiLineFileWin()
    {
        $file = new File('testFiles/multiline_file_win');

        $this->assertEquals($file->getCurrentLine(), 1);
        $this->assertEquals($file->getCurrentPos(), 0);

        $this->assertEquals($file->getNextChar(), 1);
        $this->assertEquals($file->getNextChar(), "\r");

        $this->assertEquals($file->getCurrentLine(), 1);
        $this->assertEquals($file->getCurrentPos(), 2);

        $this->assertEquals($file->getNextChar(), "\n");
        $this->assertEquals($file->getNextChar(), 2);

        $this->assertEquals($file->getCurrentLine(), 2);
        $this->assertEquals($file->getCurrentPos(), 4);

        $this->assertEquals($file->getNextChar(), "\r");
        $this->assertEquals($file->getNextChar(), "\n");

        $this->assertEquals($file->getCurrentLine(), 3);
        $this->assertEquals($file->getCurrentPos(), 6);
    }
*/
}

?>
